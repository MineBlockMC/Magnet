From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=B5=81=E5=85=89?= <i@dreamvoid.me>
Date: Sat, 1 Jun 2024 18:05:52 +0800
Subject: [PATCH] Magnet config files


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d616e22f1c32b9f48c50c76679960496a5373695..3da0ad8db40cdb9fefa25ea04235a03dc1e6595d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -221,6 +221,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         }
         net.pl3x.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Magnet start
+        try {
+            org.mineblock.magnet.MagnetConfig.init((java.io.File) options.valueOf("magnet-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        org.mineblock.magnet.MagnetConfig.registerCommands();
+        // Magnet end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/World.java b/src/main/java/net/minecraft/world/level/World.java
index cb58d2635650c20da21583ead18e9f380323205b..b835464993b9647360614aaecc560daa9cf7f553 100644
--- a/src/main/java/net/minecraft/world/level/World.java
+++ b/src/main/java/net/minecraft/world/level/World.java
@@ -1,12 +1,9 @@
 package net.minecraft.world.level;
 
-import co.aikar.timings.Timing;
-import co.aikar.timings.Timings;
 import com.destroystokyo.paper.antixray.ChunkPacketBlockController; // Paper - Anti-Xray
 import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray; // Paper - Anti-Xray
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
-import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
@@ -157,6 +154,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     public final com.tuinity.tuinity.config.TuinityConfig.WorldConfig tuinityConfig; // Tuinity - Server Config
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final org.mineblock.magnet.MagnetWorldConfig magnetConfig; // Magnet
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
@@ -299,6 +297,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName()); // Tuinity - Server Config
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName()), env); // Purpur
+        this.magnetConfig = new org.mineblock.magnet.MagnetWorldConfig((((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName())); // Purpur
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 18a6fc76fc36765d38db355e54e9555924ff9dfe..4950796a2538d8ed9637c5e90128bc60a4189f90 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -882,6 +882,7 @@ public final class CraftServer implements Server {
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        org.mineblock.magnet.MagnetConfig.init((File) console.options.valueOf("magnet-settings")); // Magnet
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -918,6 +919,7 @@ public final class CraftServer implements Server {
             world.paperConfig.init(); // Paper
             world.tuinityConfig.init(); // Tuinity - Server Config
             world.purpurConfig.init(); // Purpur
+            world.magnetConfig.init(); // Magnet
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -937,6 +939,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
         net.pl3x.purpur.PurpurConfig.registerCommands(); // Purpur
+        org.mineblock.magnet.MagnetConfig.registerCommands(); // Magnet
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2400,6 +2403,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Magnet start
+        @Override
+        public YamlConfiguration getMagnetConfig() {
+            return org.mineblock.magnet.MagnetConfig.config;
+        }
+        //Magnet end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 697aac2e79af290b4bc9ec6effd656f9043158b3..cf0d058874713ccf8b1097b0743db0af06de2df9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -162,6 +162,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Magnet Start
+                acceptsAll(asList("magnet", "magnet-settings"), "File for magnet settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("config", "magnet.yml"))
+                        .describedAs("Yml file");
+                // Magnet end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/mineblock/magnet/MagnetConfig.java b/src/main/java/org/mineblock/magnet/MagnetConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..3103fd71d37412ebefb5f204286bcff241c52504
--- /dev/null
+++ b/src/main/java/org/mineblock/magnet/MagnetConfig.java
@@ -0,0 +1,129 @@
+package org.mineblock.magnet;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.mineblock.magnet.command.MagnetCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class MagnetConfig {
+    private static final String HEADER = "This is the main configuration file for Magnet.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+            + "with caution, and make sure you know what each option does before configuring.\n"
+            + "\n"
+            + "Website: https://magnet.mineblock.cc \n"
+            + "GitHub: https://github.com/MineBlockMC/Magnet \n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load magnet.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("magnet", new MagnetCommand("magnet"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(MagnetConfig.class, null);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Magnet", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    // Configuration section start
+}
diff --git a/src/main/java/org/mineblock/magnet/MagnetWorldConfig.java b/src/main/java/org/mineblock/magnet/MagnetWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..47246728cdf9f3ce16a39cdf8ae47392eba94c11
--- /dev/null
+++ b/src/main/java/org/mineblock/magnet/MagnetWorldConfig.java
@@ -0,0 +1,71 @@
+package org.mineblock.magnet;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.*;
+import java.util.function.Predicate;
+
+import static org.mineblock.magnet.MagnetConfig.log;
+
+public class MagnetWorldConfig {
+
+    private final String worldName;
+
+    public MagnetWorldConfig(String worldName) {
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        MagnetConfig.readConfig(MagnetWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, val);
+        MagnetConfig.config.set("world-settings.default." + path, val);
+        if (MagnetConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            MagnetConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            MagnetConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = MagnetConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : MagnetConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, def);
+        return MagnetConfig.config.getBoolean("world-settings." + worldName + "." + path, MagnetConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, def);
+        return MagnetConfig.config.getDouble("world-settings." + worldName + "." + path, MagnetConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, def);
+        return MagnetConfig.config.getInt("world-settings." + worldName + "." + path, MagnetConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, def);
+        return MagnetConfig.config.getList("world-settings." + worldName + "." + path, MagnetConfig.config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        MagnetConfig.config.addDefault("world-settings.default." + path, def);
+        return MagnetConfig.config.getString("world-settings." + worldName + "." + path, MagnetConfig.config.getString("world-settings.default." + path));
+    }
+
+    // Configuration section start
+}
diff --git a/src/main/java/org/mineblock/magnet/command/MagnetCommand.java b/src/main/java/org/mineblock/magnet/command/MagnetCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..d5ec5b4e0c7b999775ad1ac850007eff063b29c2
--- /dev/null
+++ b/src/main/java/org/mineblock/magnet/command/MagnetCommand.java
@@ -0,0 +1,66 @@
+package org.mineblock.magnet.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.WorldServer;
+import org.mineblock.magnet.MagnetConfig;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class MagnetCommand extends Command {
+    public MagnetCommand(String name) {
+        super(name);
+        this.description = "Magnet related commands";
+        this.usageMessage = "/magnet [reload | version]";
+        this.setPermission("bukkit.command.magnet");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            MagnetConfig.init((File) console.options.valueOf("magnet-settings"));
+            for (WorldServer world : console.getWorlds()) {
+                world.purpurConfig.init();
+                world.resetBreedingCooldowns();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Magnet config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
