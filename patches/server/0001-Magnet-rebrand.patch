From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=B5=81=E5=85=89?= <i@dreamvoid.me>
Date: Sat, 1 Jun 2024 01:01:30 +0800
Subject: [PATCH] Magnet rebrand


diff --git a/pom.xml b/pom.xml
index 3ef0a08b7a38040e43670d18dc6c5542f9fbb9bb..e003399b40c889407fcef294842df5fadbe85433 100644
--- a/pom.xml
+++ b/pom.xml
@@ -201,7 +201,12 @@
         <!-- Purpur - Snapshots -->
         <repository>
             <id>purpur-snapshots</id>
-            <url>https://repo.pl3x.net/</url>
+            <url>https://repo.purpurmc.org/</url>
+        </repository>
+        <!-- Magnet start - extra repo for dependencies -->
+        <repository>
+            <id>paper-repo</id>
+            <url>https://repo.papermc.io/repository/maven-public/</url>
         </repository>
     </repositories>
 
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index e56ebeaaa12494817d31099eed54ef2c50b98b9e..463db4d2348540d3a2a317972f622ced8e2ce6d1 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -19,7 +19,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Purpur") // Purpur
+                .appName("Magnet") // Purpur // Magnet
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index 87891161f5b06bb8be0e2016b490484e6daca9d7..60eb5bd75d6cae8c63c17b2fbf361d0b09c3636c 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -72,7 +72,7 @@ public class EULA {
                     Properties properties = new Properties();
 
                     properties.setProperty("eula", "false");
-                    properties.store(outputstream, "By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).\nYou also agree that tacos are tasty, and the best food in the world.");  // Paper - fix lag; // Tuinity - Tacos are disgusting // Purpur - no they're not
+                    properties.store(outputstream, "By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).");  // Paper - fix lag; // Tuinity - Tacos are disgusting // Purpur - no they're not // Magnet - Too noisy
                 } catch (Throwable throwable1) {
                     throwable = throwable1;
                     throw throwable1;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index de917e53fdbd4d8965237864db5fe8bf63cca61b..d616e22f1c32b9f48c50c76679960496a5373695 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -280,7 +280,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
 
-        if (!this.getOnlineMode()) {
+        if (!this.getOnlineMode() && !com.destroystokyo.paper.PaperConfig.isProxyOnlineMode()) { // Magnet
             DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
             // Spigot start
diff --git a/src/main/java/net/pl3x/purpur/PurpurConfig.java b/src/main/java/net/pl3x/purpur/PurpurConfig.java
index 72c20065e09af656a565c2c1097f26c00b76c1e4..9cdceb1e10ca83a8ada5c8cd80599c4026c079ae 100644
--- a/src/main/java/net/pl3x/purpur/PurpurConfig.java
+++ b/src/main/java/net/pl3x/purpur/PurpurConfig.java
@@ -187,7 +187,7 @@ public class PurpurConfig {
         if (!TimingsManager.hiddenConfigs.contains("settings.seed.end-spike")) TimingsManager.hiddenConfigs.add("settings.seed.end-spike");
     }
 
-    public static String serverModName = "Purpur";
+    public static String serverModName = "Magnet"; // Magnet - Purpur did this, we don't need to do again
     private static void serverModName() {
         serverModName = getString("settings.server-mod-name", serverModName);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e9d6c38a042195dae44109706cf5710e7ac3d316..18a6fc76fc36765d38db355e54e9555924ff9dfe 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -230,7 +230,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Purpur"; // Paper // Tuinity // Purpur
+    private final String serverName = "Magnet"; // Paper // Tuinity // Purpur // Magnet
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index bfe4f7ed53620510b52d4f01c5ea2a3f726942d8..7df65d68ba3e2d77444755f7a0e8645521417176 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -397,7 +397,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new net.pl3x.purpur.PurpurVersionFetcher();
+        return new org.mineblock.magnet.MagnetVersionFetcher(); // Magnet
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 13b98439320ac1401a920c01d7cf5a4b3a23deff..4045ae42b3c0b564ddcecae72347dbd3547415fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/net.pl3x.purpur/purpur-api/pom.properties"); // Tuinity // Purpur
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.mineblock.magnet/magnet-api/pom.properties"); // Tuinity // Purpur // Magnet
         Properties properties = new Properties();
 
         if (stream != null) {
diff --git a/src/main/java/org/mineblock/magnet/MagnetVersionFetcher.java b/src/main/java/org/mineblock/magnet/MagnetVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..4961c9f22bcdc3ec265e4cb6ae1eb4fee48a0a62
--- /dev/null
+++ b/src/main/java/org/mineblock/magnet/MagnetVersionFetcher.java
@@ -0,0 +1,99 @@
+package org.mineblock.magnet;
+
+import com.destroystokyo.paper.VersionHistoryManager;
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextDecoration;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+public class MagnetVersionFetcher implements VersionFetcher {
+    private static final String GITHUB_BRANCH_NAME = "ver/1.16.5";
+
+    @Override
+    public long getCacheTime() {
+        return 720000;
+    }
+
+    @Nonnull
+    @Override
+    public Component getVersionMessage(@Nonnull String serverVersion) {
+        String[] parts = serverVersion.substring("git-Magnet-".length()).split("[-\\s]");
+        final Component updateMessage = getUpdateStatusMessage("MineBlockMC/Magnet", GITHUB_BRANCH_NAME, parts[0]);
+        final Component history = getHistory();
+
+        return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
+    }
+
+    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+        int distance;
+
+        versionInfo = versionInfo.replace("\"", "");
+        distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+
+        switch (distance) {
+            case -1:
+                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+            case 0:
+                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+            case -2:
+                return Component.text("Unknown version", NamedTextColor.YELLOW);
+            default:
+                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    @Nullable
+    private Component getHistory() {
+        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+        if (data == null) {
+            return null;
+        }
+
+        final String oldVersion = data.getOldVersion();
+        if (oldVersion == null) {
+            return null;
+        }
+
+        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+    }
+}
